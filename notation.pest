WHITESPACE = _{ " " | "\t" | "\n" }

single_line_comment = @{ ";" ~ (!NEWLINE ~ ANY)* }
single_notation_comment = _{ "#;" ~ notation }
COMMENT = _{ single_line_comment | single_notation_comment }

// --------- boolean ------------
boolean_true  = @{ "#t" }
boolean_false = @{ "#f" }
boolean = _{ boolean_true | boolean_false }

// --------- char ---------------
regular_char = @{ "#\\" ~ ANY }
char_newline = @{ "#\\newline" }
char_return = @{ "#\\return" }
char_space = @{ "#\\space" }
char_tab = @{ "#\\tab" }
char = _{
  char_newline |
  char_return |
  char_space |
  char_tab |
  regular_char
}

// --------- integer ------------
SIGN = @{ "+"|"-" }
dec_int = @{ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }
int = @{ SIGN? ~ dec_int }
// --------- rational -----------
rational = @{ int ~ "/" ~ int }
// --------- float ---------------
float = @{
    int ~ "." ~ dec_int
  | SIGN? ~ "." ~ dec_int
}

// --------- string ----------
string = @{ "\"" ~ ALPHABETIC* ~ "\"" }

// --------- identifier ----------
SCHEME_ALPHA = _{
    ALPHABETIC
  | "-"
  | "!"
  | "$"
  | "%"
  | "^"
  | "&"
  | "*"
  | "-"
  | "_"
  | "="
  | "+"
  | "<"
  | "."
  | ">"
  | "/"
  | "?"
}
identifier = @{ ALPHABETIC ~ (SCHEME_ALPHA*)? }

// --------- list ---------------
paren_list = _{ "(" ~ notation* ~ ")" }
bracket_list = _{ "[" ~ notation* ~ "]" }
list = { paren_list | bracket_list }

// --------- set ----------------
set = { "#{" ~ notation* ~ "}" }

// --------- object -------------
object = {
  "{" ~ "}" |
  "{" ~ object_pair ~ ("," ~ object_pair)* ~ ","? ~ "}"
}
unamed_object = {
  "{" ~ "}" |
  "{" ~ notation ~ ("," ~ notation)* ~ ","? ~ "}"
}
object_pair = {
  identifier ~ ":" ~ notation
}

// --------- quote --------------
quote = { "'" ~ notation }
quasiquote = { "`" ~ notation }
unquote = { "," ~ notation }
unquote_splicing = { ",@" ~ notation }
// --------- syntax -------------
syntax = { "#'" ~ notation }
quasisyntax = { "#`" ~ notation }
unsyntax = { "#," ~ notation }
unsyntax_splicing = { "#,@" ~ notation }

literal = _{
    boolean
  | char
  | float
  | rational
  | int
  | string
  | identifier
}

quoting = _{
  quote
  | quasiquote
  | unquote
  | unquote_splicing
}

syntax_ = _{
   syntax
  | quasisyntax
  | unsyntax
  | unsyntax_splicing
}

container = _{
  list
  | set
  | unamed_object
  | object
}

notation = _{
  literal
  | container
  | quoting
  | syntax_
}
